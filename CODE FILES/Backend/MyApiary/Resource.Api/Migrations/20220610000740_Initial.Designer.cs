// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resource.Api.Entities;

namespace Resource.Api.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20220610000740_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Resource.Api.Entities.EApiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Apiaries");
                });

            modelBuilder.Entity("Resource.Api.Entities.EBaseStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Is_working")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Serial_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseStations");
                });

            modelBuilder.Entity("Resource.Api.Entities.EBeehive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Alarm")
                        .HasColumnType("bit");

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.ToTable("Beehives");
                });

            modelBuilder.Entity("Resource.Api.Entities.EConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<string>("Secret_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Confirmations");
                });

            modelBuilder.Entity("Resource.Api.Entities.EDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mac_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Refresh_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Resource.Api.Entities.ENotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_date")
                        .HasColumnType("Datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Read_date")
                        .HasColumnType("Datetime");

                    b.Property<bool>("Readed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Resource.Api.Entities.ERole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Resource.Api.Entities.ERrt_blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Refresh_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Rrt_Blacklists");
                });

            modelBuilder.Entity("Resource.Api.Entities.ESensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseStationId")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<bool>("Is_working")
                        .HasColumnType("bit");

                    b.Property<float>("Max_value")
                        .HasColumnType("real");

                    b.Property<float>("Min_value")
                        .HasColumnType("real");

                    b.Property<int>("SensorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Serial_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BaseStationId");

                    b.HasIndex("BeehiveId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Resource.Api.Entities.ESensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SensorTypes");
                });

            modelBuilder.Entity("Resource.Api.Entities.ESession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Geolocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ip_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("Datetime");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Resource.Api.Entities.ETariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Max_apiaries")
                        .HasColumnType("int");

                    b.Property<int>("Max_beehives")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("Resource.Api.Entities.EUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PhoneConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TariffId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Resource.Api.Entities.EApiary", b =>
                {
                    b.HasOne("Resource.Api.Entities.EUser", "User")
                        .WithMany("Apiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resource.Api.Entities.EBeehive", b =>
                {
                    b.HasOne("Resource.Api.Entities.EApiary", "Apiary")
                        .WithMany("Beehives")
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apiary");
                });

            modelBuilder.Entity("Resource.Api.Entities.EConfirmation", b =>
                {
                    b.HasOne("Resource.Api.Entities.EUser", "User")
                        .WithMany("Confirmations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resource.Api.Entities.EDevice", b =>
                {
                    b.HasOne("Resource.Api.Entities.EUser", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Resource.Api.Entities.ENotification", b =>
                {
                    b.HasOne("Resource.Api.Entities.EApiary", "Apiary")
                        .WithMany("Notifications")
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apiary");
                });

            modelBuilder.Entity("Resource.Api.Entities.ERrt_blacklist", b =>
                {
                    b.HasOne("Resource.Api.Entities.EDevice", "Device")
                        .WithMany("Rrt_Blacklists")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Resource.Api.Entities.ESensor", b =>
                {
                    b.HasOne("Resource.Api.Entities.EBaseStation", "BaseStation")
                        .WithMany("Sensors")
                        .HasForeignKey("BaseStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resource.Api.Entities.EBeehive", "Beehive")
                        .WithMany("Sensors")
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resource.Api.Entities.ESensorType", "SensorType")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseStation");

                    b.Navigation("Beehive");

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("Resource.Api.Entities.ESession", b =>
                {
                    b.HasOne("Resource.Api.Entities.EDevice", "Device")
                        .WithMany("Sessions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Resource.Api.Entities.EUser", b =>
                {
                    b.HasOne("Resource.Api.Entities.ERole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resource.Api.Entities.ETariff", "Tariff")
                        .WithMany("Users")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Resource.Api.Entities.EApiary", b =>
                {
                    b.Navigation("Beehives");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Resource.Api.Entities.EBaseStation", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Resource.Api.Entities.EBeehive", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Resource.Api.Entities.EDevice", b =>
                {
                    b.Navigation("Rrt_Blacklists");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Resource.Api.Entities.ERole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Resource.Api.Entities.ESensorType", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Resource.Api.Entities.ETariff", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Resource.Api.Entities.EUser", b =>
                {
                    b.Navigation("Apiaries");

                    b.Navigation("Confirmations");

                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
